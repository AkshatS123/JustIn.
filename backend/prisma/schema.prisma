// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  avatar    String?
  bio       String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products    Product[]
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  favorites   Favorite[]
  reviews     Review[]
  followers   Follow[] @relation("UserFollowers")
  following   Follow[] @relation("UserFollowing")

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Float
  images      String[] // Array of image URLs
  category    String?
  condition   String?  // new, used, etc.
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sellerId String
  seller   User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  favorites Favorite[]
  reviews   Review[]

  @@map("products")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  senderId   String
  receiverId String
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  reviewerId String
  productId  String
  reviewer   User    @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, productId])
  @@map("reviews")
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  followerId String
  followingId String
  follower   User   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following  User   @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
} 